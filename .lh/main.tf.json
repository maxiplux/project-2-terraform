{
    "sourceFile": "main.tf",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1705273125725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705274239430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,10 +245,10 @@\n   name_prefix   = \"base_aws_launch_configuration-config\"\n   image_id      = \"ami-0c7217cdde317cfec\"\n   instance_type = \"t2.micro\"\n \n-  \n-  user_data = <<-EOF\n+\n+  user_data       = <<-EOF\n                     #!/bin/bash\n                     echo \"export DB_HOST=${aws_db_instance.postgres.address}\" >> /etc/environment\n                     sudo apt update -y\n                     sudo apt-get install ec2-instance-connect -y\n"
                }
            ],
            "date": 1705273125725,
            "name": "Commit-0",
            "content": "terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 4.0\"\n    }\n\n  }\n}\n\n\n\nresource \"tls_private_key\" \"ssh\" {\n  algorithm = \"RSA\"\n  rsa_bits  = \"4096\"\n}\n\nresource \"aws_key_pair\" \"generated_key\" {\n  key_name   = \"terraform-pem-ha\"\n  public_key = tls_private_key.ssh.public_key_openssh\n\n\n}\n\nresource \"local_file\" \"private_key\" {\n  content         = tls_private_key.ssh.private_key_pem\n  filename        = \"terraform-ha.pem\"\n  file_permission = \"0600\"\n}\n\n\n\n# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-1\"\n  default_tags {\n    tags = {\n      Name    = \"weclouddata\"\n      project = \"devops\"\n    }\n  }\n}\n\nresource \"aws_vpc\" \"terraform_vpc\" {\n  cidr_block           = \"172.16.0.0/16\"\n  enable_dns_hostnames = \"true\"\n\n  tags = {\n    Name = \"Terraform-ha\"\n  }\n}\nresource \"aws_internet_gateway\" \"terraform_vpc_internet_gateway\" {\n  vpc_id = aws_vpc.terraform_vpc.id\n  tags = {\n    Name = \"Terraform-ha\"\n  }\n}\nresource \"aws_route_table\" \"terraform_aws_route_table\" {\n  vpc_id = aws_vpc.terraform_vpc.id\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.terraform_vpc_internet_gateway.id\n  }\n}\n\n\n\nresource \"aws_subnet\" \"terraform_subnet-1a\" {\n  vpc_id                  = aws_vpc.terraform_vpc.id\n  cidr_block              = \"172.16.10.0/24\"\n  availability_zone       = \"us-east-1a\"\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"Terraform-ha\"\n  }\n}\n\nresource \"aws_subnet\" \"terraform_subnet-1b\" {\n  vpc_id                  = aws_vpc.terraform_vpc.id\n  cidr_block              = \"172.16.11.0/24\"\n  availability_zone       = \"us-east-1b\"\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"Terraform-ha\"\n  }\n}\n\nresource \"aws_eip\" \"terraform_eip\" {\n  vpc = true\n  tags = {\n    Name = \"Terraform-ha\"\n  }\n}\nresource \"aws_nat_gateway\" \"terraform_aws_nat_gateway\" {\n  allocation_id = aws_eip.terraform_eip.id\n  subnet_id     = aws_subnet.terraform_subnet-1a.id\n  tags = {\n    Name = \"Terraform-ha\"\n  }\n  depends_on = [aws_internet_gateway.terraform_vpc_internet_gateway]\n\n}\n\n\n\nresource \"aws_route_table_association\" \"terraform_aws_route_table_association\" {\n  subnet_id      = aws_subnet.terraform_subnet-1a.id\n  route_table_id = aws_route_table.terraform_aws_route_table.id\n}\n\nresource \"aws_network_interface\" \"terraform_network_interface\" {\n  subnet_id   = aws_subnet.terraform_subnet-1a.id\n  private_ips = [\"172.16.10.100\"]\n\n  tags = {\n    Name = \"Terraform-ha\",\n  }\n}\n\n\n\nresource \"aws_security_group\" \"terraform_security_group\" {\n  name   = \"terraform_security_group-sg\"\n  vpc_id = aws_vpc.terraform_vpc.id\n  ingress {\n    cidr_blocks      = [\"0.0.0.0/0\"]\n    ipv6_cidr_blocks = [\"::/0\"]\n    description      = \"HTTP access\"\n    from_port        = 80\n    to_port          = 80\n    protocol         = \"TCP\"\n  }\n\n\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name = \"Terraform-ha\",\n  }\n}\n\n\n\nresource \"aws_security_group\" \"terraform_security_icmp_group\" {\n  name   = \"terraform_security_group-icmp-sg\"\n  vpc_id = aws_vpc.terraform_vpc.id\n  ingress {\n    //cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Acceso al puerto ICMP desde el exterior\"\n\n    from_port        = -1\n    to_port          = -1\n    protocol         = \"icmp\"\n    cidr_blocks      = [\"0.0.0.0/0\"]\n    ipv6_cidr_blocks = [\"::/0\"]\n  }\n  tags = {\n    Name = \"Terraform-ha\",\n  }\n}\n\nresource \"aws_security_group\" \"terraform_security_ssh_group\" {\n  name   = \"terraform_security_ssh_group-sg\"\n  vpc_id = aws_vpc.terraform_vpc.id\n  ingress {\n    cidr_blocks = [\"0.0.0.0/0\"]\n    description = \"Acceso al puerto 22 desde el exterior\"\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"TCP\"\n  }\n\n  tags = {\n    Name = \"Terraform-ha\",\n  }\n}\nprovider \"tls\" {}\n\n########################################################################################\n\nresource \"aws_security_group\" \"postgres\" {\n  vpc_id      = aws_vpc.terraform_vpc.id\n  name        = \"uddin\"\n  description = \"Allow all inbound for Postgres\"\n  ingress {\n    from_port   = 5432\n    to_port     = 5432\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n\nresource \"aws_db_instance\" \"postgres\" {\n  allocated_storage    = 20\n  storage_type         = \"gp2\"\n  engine               = \"postgres\"\n  db_subnet_group_name = aws_db_subnet_group.postgres.name\n\n  engine_version         = \"15\"          # Specify the PostgreSQL version\n  instance_class         = \"db.m5.large\" # Choose the instance class based on your requirement\n  username               = \"postgres\"\n  password               = \"postgres\"\n  parameter_group_name   = \"default.postgres15\"\n  vpc_security_group_ids = [aws_security_group.postgres.id]\n\n  skip_final_snapshot = true\n  publicly_accessible = true\n\n  tags = {\n    Name = \"MyDBInstance\"\n  }\n}\n\nresource \"aws_db_subnet_group\" \"postgres\" {\n  name       = \"main\"\n  subnet_ids = [aws_subnet.terraform_subnet-1a.id, aws_subnet.terraform_subnet-1b.id]\n\n  tags = {\n    Name = \"My DB subnet group\"\n  }\n}\n\n####################################################################################################\n\n\n\n\n\n\n\n\n\n\n\nresource \"aws_launch_configuration\" \"weclouddata\" {\n  name_prefix   = \"base_aws_launch_configuration-config\"\n  image_id      = \"ami-0c7217cdde317cfec\"\n  instance_type = \"t2.micro\"\n\n  \n  user_data = <<-EOF\n                    #!/bin/bash\n                    echo \"export DB_HOST=${aws_db_instance.postgres.address}\" >> /etc/environment\n                    sudo apt update -y\n                    sudo apt-get install ec2-instance-connect -y\n                    sudo add-apt-repository -y ppa:deadsnakes/ppa\n                    sudo apt install -y python3.12\n\n                    sudo apt-get install -y  ca-certificates curl gnupg mc pip\n                    sudo install -m 0755 -d /etc/apt/keyrings\n                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n                    sudo chmod a+r /etc/apt/keyrings/docker.gpg\n\n                    # Add the repository to Apt sources:\n                    echo \\\n                    \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n                    $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n                    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n                    sudo apt-get update -y\n                    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n                    sudo mkdir /app\n                    sudo chown ubuntu:users /app\n                    cd /app && git clone https://github.com/maxiplux/api-python-project-devops-fast-api.git\n                    cd api-python-project-devops-fast-api && pip install -r requirements.txt && sudo uvicorn main:app --reload --host 0.0.0.0 --port 80\n              EOF\n  key_name        = aws_key_pair.generated_key.key_name\n  security_groups = [aws_security_group.terraform_security_group.id, aws_security_group.terraform_security_ssh_group.id, aws_security_group.terraform_security_icmp_group.id]\n\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\n\nresource \"aws_autoscaling_group\" \"weclouddata\" {\n  min_size             = 2\n  max_size             = 6\n  desired_capacity     = 2\n  launch_configuration = aws_launch_configuration.weclouddata.name\n  vpc_zone_identifier  = [aws_subnet.terraform_subnet-1a.id, aws_subnet.terraform_subnet-1b.id]\n}\n\nresource \"aws_lb\" \"weclouddata\" {\n  name               = \"weclouddata-lb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = [aws_security_group.terraform_security_group.id]\n  subnets            = [aws_subnet.terraform_subnet-1a.id, aws_subnet.terraform_subnet-1b.id]\n}\n\nresource \"aws_lb_listener\" \"weclouddata\" {\n  load_balancer_arn = aws_lb.weclouddata.arn\n  port              = \"80\"\n  protocol          = \"HTTP\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = aws_lb_target_group.weclouddata.arn\n  }\n}\n\nresource \"aws_lb_target_group\" \"weclouddata\" {\n  name     = \"weclouddata\"\n  port     = 80\n  protocol = \"HTTP\"\n  vpc_id   = aws_vpc.terraform_vpc.id\n}\n\n\nresource \"aws_autoscaling_attachment\" \"weclouddata\" {\n  autoscaling_group_name = aws_autoscaling_group.weclouddata.id\n  alb_target_group_arn   = aws_lb_target_group.weclouddata.arn\n}\n\n\n\noutput \"dns_load_balancer\" {\n  description = \"DNS ALB\"\n  value       = \"http://${aws_lb.weclouddata.dns_name}\"\n}\n\n\n\n\noutput \"db_address\" {\n  value = aws_db_instance.postgres.address\n}\n\n\n//terraform output -raw private_key > terraform.pem\noutput \"private_key\" {\n  value     = tls_private_key.ssh.private_key_pem\n  sensitive = true\n}\n\n\n"
        }
    ]
}